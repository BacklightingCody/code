/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function (candidates, target) {
  const result = [];  // 用于存储所有合法的组合

  const backtrack = (currentCombination, remainingTarget, startIndex) => {
    // 终止条件：当剩余的目标为 0 时，说明找到了一组组合
    if (remainingTarget === 0) {
      result.push([...currentCombination]);  // 注意拷贝当前组合
      return;
    }

    // 当剩余的目标小于 0 时，表示当前组合不合法，直接返回
    if (remainingTarget < 0) {
      return;
    }

    // 遍历候选数组，从 startIndex 开始避免重复计算
    for (let i = startIndex; i < candidates.length; i++) {
      const num = candidates[i];
      currentCombination.push(num);  // 选择当前数字
      backtrack(currentCombination, remainingTarget - num, i);  // 递归处理
      currentCombination.pop();  // 回溯，撤销选择
    }
  };

  backtrack([], target, 0);  // 从空组合和 target 开始递归
  return result;
};
const candidates = [2, 3, 6, 7], target = 7
console.log(combinationSum(candidates,target))